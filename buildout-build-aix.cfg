[buildout]
extends = buildout-build.cfg
parts = zlib ncurses expat libev readline libiconv xz libxml2 libunistring libtasn1 gettext openssl openssh gmp libgpg-error libgcrypt nettle libgnugetopt libgnutls bzip2 sqlite libxslt libffi gdbm cyrus-sasl libevent openldap mpdecimal libsodium zeromq libuv c-ares python

[environment]
PATH = ${options:prefix}/bin:/opt/freeware/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/ucb:/usr/bin/X11
PKG_CONFIG_PATH = ${options:prefix}/lib/pkgconfig
SHELL = /bin/bash
CONFIG_SHELL = /bin/bash
AR = ar -X64
NM = nm -B -X64
CC = gcc -Os -fPIC -maix64 -static-libgcc
CXX = g++ -Os -fPIC -maix64 -static-libgcc -static-libstdc++
LDFLAGS = -L${options:prefix}/lib -Wl,-blibpath:/usr/lib -Wl,-b64 -Wl,-brtl
SHARED_LDFLAGS = ${:LDFLAGS}
LIBPATH = ${options:prefix}/lib
CFLAGS = -I${options:prefix}/include -Os -fPIC -maix64 -static-libgcc
CPPFLAGS = ${:CFLAGS}
CXXFLAGS = ${:CFLAGS} -static-libstdc++
# The *_LIBRARY_PATH definitions cause built-in executables that we run to link against our new shared objects which doesn't work
DYLD_LIBRARY_PATH =
LD_LIBRARY_PATH =
OBJECT_MODE = 64

[openssl]
configure-options = --prefix=${options:prefix} --openssldir=${:openssldir} --libdir=lib shared threads zlib aix64-gcc
openssldir = /var/ssl
patches = ${:patches-dir}/${:name}-${:version}-Configurations-10-main.conf.patch
          ${:patches-dir}/${:name}-${:version}-Configurations-unix-Makefile.tmpl.patch

[libgcrypt]
configure-options += --disable-asm

[libgnutls]
environment-section = libgnutls-environment

[libgnutls-environment]
<= environment
LDFLAGS = ${environment:LDFLAGS} -lgnugetopt

[python]
<= options
environment-section = python-environment
configure-options = --prefix=${options:prefix} --enable-shared --enable-ipv6 --enable-loadable-sqlite-extensions --with-dbmliborder=gdbm --with-system-libmpdec --with-system-expat --with-system-ffi --libdir=${options:prefix}/lib --with-openssl=${options:prefix}
patches = ${:patches-dir}/${:name}-${:version}-pythonhome-pythonrun.c.patch
    ${:patches-dir}/${:name}-${:version}-linux-symlink.patch
    ${:patches-dir}/${:name}-${:version}-aix-libpath.patch
    ${:patches-dir}/${:name}-${:version}-aix-Makefile.patch
    ${:patches-dir}/${:name}-${:version}-Modules-Setup.patch
    ${:patches-dir}/${:name}-${:version}-setup.py.patch
    ${:patches-dir}/${:name}-${:version}-expat.patch
    ${:patches-dir}/${:name}-${:version}-configure.patch
post-make-hook = ${options:hooks-dir}/aix.py:python_post_make

[python-environment]
<= environment
LDSHARED = ${environment:SHARED_LDFLAGS} -static-libgcc -static-libstdc++
LDCXXSHARED = ${environment:SHARED_LDFLAGS} -static-libgcc -static-libstdc++
OPT = -DNDEBUG -fwrapv -Os -Wall -Wstrict-prototypes
# RUNSHARED is the env var that is used to run python during make, for example
# when building the external modules for Python like "_ctypes". The default on
# on AIX sets LIBPATH to whatever is in the environment variables already. We
# want to set LIBPATH to our lib folder for that purpose but we can't set LIBPATH
# for the entire build process because that can interfere with external binaries
# like gcc. So we have a patch in place that clears RUNSHARED so that we can
# set it here, making LIBPATH correct specifically during the "shared modules"
# build
RUNSHARED = LIBPATH=${options:prefix}/lib
