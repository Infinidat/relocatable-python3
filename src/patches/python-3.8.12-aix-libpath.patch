diff --git a/Lib/subprocess.py b/Lib/subprocess.py
index 85b9ea0..9abafd6 100644
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -1620,6 +1620,8 @@ class Popen(object):
                     if env is not None:
                         env_list = []
                         for k, v in env.items():
+                            if k == "LIBPATH":
+                                continue
                             k = os.fsencode(k)
                             if b'=' in k:
                                 raise ValueError("illegal environment variable name")
diff --git a/Modules/_posixsubprocess.c b/Modules/_posixsubprocess.c
index e693e53..7047517 100644
--- a/Modules/_posixsubprocess.c
+++ b/Modules/_posixsubprocess.c
@@ -508,6 +508,7 @@ child_exec(char *const exec_array[],
     /* This loop matches the Lib/os.py _execvpe()'s PATH search when */
     /* given the executable_list generated by Lib/subprocess.py.     */
     saved_errno = 0;
+    unsetenv("LIBPATH");
     for (i = 0; exec_array[i] != NULL; ++i) {
         const char *executable = exec_array[i];
         if (envp) {
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index b09204d..f0e918d 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -4456,6 +4456,7 @@

     Py_BEGIN_ALLOW_THREADS
     _Py_BEGIN_SUPPRESS_IPH
+    unsetenv("LIBPATH");
     result = _wsystem(command);
     _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
@@ -5162,6 +5163,8 @@
         val = PyList_GetItem(vals, pos);
         if (!key || !val)
             goto error;
+        if (strcmp(key, "LIBPATH") == 0) continue;
+

 #if defined(HAVE_WEXECV) || defined(HAVE_WSPAWNV)
         if (!PyUnicode_FSDecoder(key, &key2))
@@ -5300,6 +5303,7 @@
         return NULL;
     }

+    unsetenv("LIBPATH");
     if (PySys_Audit("os.exec", "OOO", path->object, argv, Py_None) < 0) {
         free_string_array(argvlist, argc);
         return NULL;
@@ -5973,6 +5977,7 @@
         mode = _P_OVERLAY;
 #endif

+    unsetenv("LIBPATH");
     if (PySys_Audit("os.spawn", "iOOO", mode, path->object, argv,
                     Py_None) < 0) {
         free_string_array(argvlist, argc);