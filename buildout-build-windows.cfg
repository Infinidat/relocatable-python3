[buildout]
extends = buildout-build.cfg
parts = mkdir zlib xz openssl libiconv bzip2 tcl tcl-win tk tk-win sqlite3 sqlite3-win libxml2 libxml2-win libxslt libxslt-win libevent libffi python python-libffi python-win-instrumentation python-win-pgo python-win

[environment-windows]
XSystemDrive = C:
XWinDir = ${:XSystemDrive}\WINDOWS
XProgramFiles = ${:XSystemDrive}\Program Files (x86)
FrameworkDir = ${:XWinDir}\Microsoft.NET\Framework64
PerlExe = ${:XSystemDrive}\Perl64\bin\perl.exe
FrameworkVersion = v4.0.30319
WindowsSdkDir = ${:XProgramFiles}\Windows Kits\10
VSINSTALLDIR = ${:XProgramFiles}\Microsoft Visual Studio\2017\Enterprise
VCRoot = ${:VSINSTALLDIR}\VC
VCINSTALLDIR = ${:VCRoot}
NODEBUG = 1
DevEnvDir = ${:VSINSTALLDIR}\Common7\IDE
Msvc = ${:VCRoot}\Tools\MSVC\14.16.27023
XSDKVer = 10.0.17763.0
WindowsSdkInclude = ${:WindowsSdkDir}\Include\${:XSDKVer}
WindowsSdkLib = ${:WindowsSdkDir}\Lib\${:XSDKVer}
VSLIB = ${:Msvc}\lib\x64
VSBIN = ${:Msvc}\bin\Hostx64\x64
SDKBIN = ${:WindowsSdkDir}\bin\${:XSDKVer}\x64
LIB = ${:VSLIB};${:WindowsSdkLib}\um\x64;${:WindowsSdkLib}\ucrt\x64;${:PREFIX}\lib
LIBPATH = ${:FrameworkDir};${:FrameworkDir}\${:FrameworkVersion};${:VSLIB}
INCLUDE = ${:WindowsSdkInclude}\shared;${:WindowsSdkInclude}\um;${:WindowsSdkInclude}\ucrt;${:Msvc}\include;${:PREFIX}\include
Recipe = hexagonit.recipe.cmmi
PosixHomeDir=${:XSystemDrive}\Cygwin\home\Administrator
GitDir = ${:PosixHomeDir}\git
GitBinDir = ${:GitDir}\bin
CygwinBinDir = ${:XSystemDrive}\Cygwin\bin
PythonDir = ${:PosixHomeDir}\python
PythonBinDir = ${:PythonDir}\bin
PATH = ${:VSINSTALLDIR}\MSBuild\15.0\Bin;${:DevEnvDir};${:VSBIN};${:VSINSTALLDIR}\Common7\Tools;${:VSINSTALLDIR}\Common7\Tools\bin;${:FrameworkDir};${:FrameworkDir}\Microsoft .NET Framework 3.5 (Pre-Release Version);${:FrameworkDir}\${:FrameworkVersion};${:VCRoot}\VCPackages;${:SDKBIN};${:XWinDir}\system32;${:XWinDir};${:XWinDir}\System32\Wbem;${:GitDir}\cmd;${:GitBinDir};${:PythonBinDir};${:CygwinBinDir}
PREFIX = ${options:prefix}
IIPREFIX = ${options:prefix}
MSVCDIR = ${:VSINSTALLDIR}
VCTargetsPath = ${:VSINSTALLDIR}\Common7\IDE\VC\VCTargets
TZ = 

[options]
configure-command = true
configure-options =
make-binary = nmake
make-options = -f win32/Makefile.msc
environment-section = environment-windows
prefix = ${buildout:directory}\dist
hooks-dir = ${buildout:directory}\src\hooks

[mkdir]
recipe = z3c.recipe.mkdir
paths = dist
    dist/bin
    dist/lib
    dist/include

[zlib]
name = zlib
url = ${urls:source}/${:name}-${:version}.tar.gz
patches = ${:patches-dir}/${:name}-${:version}-windows-Makefile.patch

[xz]
# pre-built binaries used for lzma
# TODO download from https://github.com/python/cpython-source-deps/tree/xz
# and compile with Python's PCbuild\liblzma.vcxproj?
<= options
recipe = hexagonit.recipe.cmmi
name = xz
version = 5.2.4
url = ftp://python.infinidat.com/python/sources/xz-${:version}-windows.zip
configure-command = true
make-binary = true
post-make-hook = ${options:hooks-dir}\windows.py:xz_post_make

[openssl]
configure-command = ${environment-windows:PerlExe}
configure-options = Configure VC-WIN64A enable-zlib enable-static-engine enable-zlib-dynamic enable-capieng no-asm no-shared --prefix=${options:prefix}
name = openssl
make-options = 

[libiconv]
<= options
name = libiconv
version = 1.16
url = ${urls:source}/${:name}-${:version}-windows.tar.gz
make-binary = devenv
make-options = build-VS2017/libiconv.sln /build "Release|x64"
make-targets = 
configure-command = true
patches = ${:patches-dir}/${:name}-${:version}-windows-Makefile.patch
post-make-hook = ${options:hooks-dir}\windows.py:libiconv_post_make

[bzip2]
configure-command = true
make-options = -f makefile.msc PREFIX=${options:prefix}
name = bzip2
patches = ${:patches-dir}/${:name}-${:version}-windows-Makefile.patch

[tcl]
<= options
recipe = hexagonit.recipe.cmmi
name = tcl
version = 8.6.10
url = ${urls:source}/${:name}${:version}-src.tar.gz
configure-command = true
make-binary = true

[tcl-win]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\tcl__compile__\tcl${tcl:version}\win
make-binary = nmake
make-options = -f Makefile.vc all OPTS=static,threads INSTALLDIR=${options:prefix}
post-make-hook = ${options:hooks-dir}\windows.py:tcl_post_make

[tk]
<= options
recipe = hexagonit.recipe.cmmi
name = tk
version = 8.6.10
url = ${urls:source}/${:name}${:version}-src.tar.gz
configure-command = true
make-binary = true

[tk-win]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\tk__compile__\tk${tk:version}\win
make-binary = nmake
make-options = -f Makefile.vc all OPTS=static,threads INSTALLDIR=${options:prefix} TCLDIR=${buildout:directory}\parts\tcl__compile__\tcl${tcl:version}

[sqlite3]
make-binary = true
version = autoconf-3380500

[sqlite3-win]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\sqlite3__compile__\sqlite-autoconf-3380500\tea\win
make-binary = nmake
make-options = -f Makefile.vc all OPTS=static,threads INSTALLDIR=${options:prefix}

[libxml2]
make-binary = true

[libxml2-win]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\libxml2__compile__\libxml2-${libxml2:version}\win32
configure-command = cscript
configure-options = configure.js compiler=msvc prefix=${options:prefix} include=${options:prefix}\include lib=${options:prefix}\lib
make-options = -f Makefile.msvc

[libxslt]
make-binary = true
# the patch fixes a problem that should be fixed in next libxslt:
# https://gitlab.gnome.org/GNOME/libxslt/commit/e2584eed1c84c18f16e42188c30d2c3d8e3e8853
patches = ${:patches-dir}/${:name}-${:version}-win32-configure.patch

[libxslt-win]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\libxslt__compile__\libxslt-${libxslt:version}\win32
configure-command = cscript
configure-options = configure.js compiler=msvc prefix=${options:prefix} include=${options:prefix}\include\libxml2 lib=${options:prefix}\lib
make-options = -f Makefile.msvc

[libevent]
version = 2.0.17
make-options = -f Makefile.nmake
make-targets = static_libs
post-make-hook = ${options:hooks-dir}\windows.py:tcl_post_make

[libffi]
<= options
name = libffi
# TODO use git-recipe to download directly from https://github.com/python/cpython-source-deps/tree/libffi
url = ${urls:source}/${:name}-cpython.tar.gz
make-binary = true
configure-command = true

[python]
make-binary = true
patch-binary = git init && git apply --ignore-whitespace
patches = ${:patches-dir}/${:name}-${:version}-windows-Makefile.patch
    ${:patches-dir}/${:name}-${:version}-sysconfig.py.patch
    ${:patches-dir}/${:name}-${:version}-distutils-sysconfig.py.patch
    ${:patches-dir}/${:name}-${:version}-pythonhome-pythonrun.c.patch
    ${:patches-dir}/${:name}-${:version}-windows-getpathp.patch
    ${:patches-dir}/${:name}-${:version}-windows-distutils-static-compile.patch
post-make-hook =

[python-libffi-environment]
<= environment-windows
LIBFFI_SOURCE = ${buildout:directory}\parts\libffi__compile__\cpython-source-deps-libffi

[python-libffi]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\python__compile__\python-${python:version}\PCbuild
make-binary = cmd
make-options = /c
environment-section = python-libffi-environment
make-targets = "prepare_libffi.bat -x64"
post-make-hook = ${options:hooks-dir}\windows.py:libffi_post_make

[python-win-instrumentation]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\python__compile__\python-${python:version}\PCbuild
make-binary = devenv
make-options = pcbuild.sln /build "PGInstrument|x64"
make-targets = 

[python-win-pgo]
<= options
recipe = hexagonit.recipe.cmmi
path = ${buildout:directory}\parts\python__compile__\python-${python:version}\PCbuild
make-binary = cmd
make-options = /c
make-targets = python.exe -m test --pgo

[python-win]
<= python-win-instrumentation
make-options = pcbuild.sln /build "PGUpdate|x64"
post-make-hook = ${options:hooks-dir}\windows.py:python_post_make
